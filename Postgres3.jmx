<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">www.example.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="1374358793">ProjectDetails</stringProp>
          <stringProp name="-2012536775">TimeZone</stringProp>
          <stringProp name="1704970583">RunDetails</stringProp>
          <stringProp name="1189374577">ConcurrentUsers</stringProp>
          <stringProp name="-279188086">TotalTestDuration</stringProp>
          <stringProp name="-1021390074">JTLFile_Path</stringProp>
          <stringProp name="-761045172">CSVFileData</stringProp>
          <stringProp name="-1508720035">TimeStamps</stringProp>
          <stringProp name="1383451591">Final_CSV_Path</stringProp>
          <stringProp name="-1810616876">DatabaseUrl</stringProp>
          <stringProp name="1000541105">DatabaseUserName</stringProp>
          <stringProp name="-1810773674">DatabasePassword</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-624932024">
            <stringProp name="1143879147">Azamara</stringProp>
            <stringProp name="67044">CST</stringProp>
            <stringProp name="-1835955085">Run_10</stringProp>
            <stringProp name="1572">15</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="-374787012">/home/ubuntu/pg/pg.jtl</stringProp>
            <stringProp name="-1123611470">/home/ubuntu/pg/JTLtoCSV.csv</stringProp>
            <stringProp name="-925726032">/home/ubuntu/pg/TimeStamps.txt</stringProp>
            <stringProp name="-1085232293">/home/ubuntu/pg/FinalCSVForDatabase.csv</stringProp>
            <stringProp name="-1682634313">jdbc:postgresql://piaas-postgres-db.cvnkyoxdzoea.us-east-1.rds.amazonaws.com:5432/PIAAS</stringProp>
            <stringProp name="757584761">postgres</stringProp>
            <stringProp name="-160184576">DoytEuXPiamqOaZv1ALD</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">D:/Tools/PostgreSQL/ResultsJTL/TimeStamps.txt FinalCSVForDataBase
DoytEuXPiamqOaZv1ALD
jdbc:postgresql://piaas-postgres-db.cvnkyoxdzoea.us-east-1.rds.amazonaws.com:5432/PIAAS
Azamara</stringProp>
      </UserParameters>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">Pg_pool</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://piaas-postgres-db.cvnkyoxdzoea.us-east-1.rds.amazonaws.com:5432/PIAAS</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">DoytEuXPiamqOaZv1ALD</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">postgres</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler time stamp extract start time and end time_Final" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat
import java.util.Date
import java.io.FileWriter


def jtlFilePath = vars.get(&quot;JTLFile_Path&quot;)
def outputFilePath = vars.get(&quot;TimeStamps&quot;)


def lines = Files.readAllLines(Paths.get(jtlFilePath))


def outputDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)


def startTime = parseTimestamp(lines[1])


def endTime = parseTimestamp(lines[-1])

def writer = new FileWriter(outputFilePath)


writer.write(&quot;startTime,endTime\n&quot;)


def formattedStartTime = outputDateFormat.format(new Date(startTime))
def formattedEndTime = outputDateFormat.format(new Date(endTime))


lines.each { line -&gt;
    writer.write(&quot;$formattedStartTime,$formattedEndTime\n&quot;)
}


writer.close()

def parseTimestamp(line) {
    def timestampString = line.split(&apos;,&apos;)[0].trim()
    try {
        
        return Long.parseLong(timestampString)
    } catch (NumberFormatException e) {
        
        println &quot;Error parsing timestamp: $timestampString&quot;

        return 0
    }
}
</stringProp>
          <stringProp name="TestPlan.comments">&apos;D:\\Tools\\PostgreSQL\\ResultsJTL\\TimeStamps.txt&apos;</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Generate CSV file from JTL file" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">C:\Users\Tharak\AppData\Local\Programs\Git\git-bash.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">sh PluginsManagerCMD.sh --tool Reporter --generate-csv &quot;/c/Users/Tharak/Downloads/pg/JTLtoCSV.csv&quot; --input-jtl &quot;/c/Users/Tharak/Downloads/pg/pg.jtl&quot; --plugin-type AggregateReport</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="TestPlan.comments">D:\Tools\PostgreSQL\ResultsJTL\JTLtoCSV.csv</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Generate CSV file from JTL file" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">bash</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">-c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">sh PluginsManagerCMD.sh --tool Reporter --generate-csv &quot;${CSVFileData}&quot; --input-jtl &quot;${JTLFile_Path}&quot; --plugin-type AggregateReport</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="TestPlan.comments">D:\Tools\PostgreSQL\ResultsJTL\JTLtoCSV.csv</stringProp>
          <stringProp name="SystemSampler.directory">/home/ubuntu/java/apache-jmeter-5.5/bin</stringProp>
        </SystemSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="FinalCSV for removing the special characters" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

String filePath = vars.get(&quot;CSVFileData&quot;)
StringBuilder modifiedContent = new StringBuilder();

try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
    String line;
    while ((line = reader.readLine()) != null) {
       
        line = removeCommasWithinQuotes(line);
        
        line = removeSpecialCharacters(line);
        modifiedContent.append(line).append(System.lineSeparator());
    }
} catch (IOException e) {
    System.err.println(&quot;An error occurred while reading the CSV file: &quot; + e.getMessage());
}


try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
    writer.write(modifiedContent.toString());
    System.out.println(&quot;CSV file updated successfully.&quot;);
} catch (IOException e) {
    System.err.println(&quot;An error occurred while updating the CSV file: &quot; + e.getMessage());
}

String removeSpecialCharacters(String str) {
    return str.replaceAll(&quot;[^a-zA-Z0-9_./\\s,]&quot;, &quot;&quot;);
}

String removeCommasWithinQuotes(String line) {
    StringBuilder result = new StringBuilder();
    boolean withinQuotes = false;

    for (int i = 0; i &lt; line.length(); i++) {
        char currentChar = line.charAt(i);
        if (currentChar == &apos;&quot;&apos;) {
            withinQuotes = !withinQuotes; 
        }

        if (currentChar == &apos;,&apos; &amp;&amp; withinQuotes) {
            
            continue;
        }

        result.append(currentChar);
    }

    return result.toString();
}
</stringProp>
          <stringProp name="TestPlan.comments">&quot;D:\\Tools\\PostgreSQL\\ResultsJTL\\JTLtoCSV.csv&quot;;</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223SamplerFinalCsv Ater adding the time stamp" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat
import java.io.File


def convertedCsvFilePath = vars.get(&quot;CSVFileData&quot;)
def timestampsFilePath = vars.get(&quot;TimeStamps&quot;)
def finalCsvFilePath = vars.get(&quot;Final_CSV_Path&quot;)


if (!convertedCsvFilePath || !timestampsFilePath || !finalCsvFilePath) {
    log.error(&quot;One or more file paths are missing. Please check your JMeter User Parameters.&quot;)
    return
}


def convertedCsvFile = new File(convertedCsvFilePath)
def timestampsFile = new File(timestampsFilePath)
def finalCsvFile = new File(finalCsvFilePath)


def convertedLines = convertedCsvFile.readLines()
def timestamps = timestampsFile.readLines()


log.info(&quot;Timestamps:&quot;)
timestamps.each { log.info(it) }


def mergedLines = []

mergedLines.add(&quot;Label,# Samples,Average,Median,90Line,95Line,99Line,Min,Max,Error,Throughpu,Received K,Std. Dev.,startTime,endTime&quot;)


for (int i = 1; i &lt; Math.min(convertedLines.size(), timestamps.size()); i++) {
    def convertedLine = convertedLines[i].trim()
    def timestamp = timestamps[i].trim()
    
    if (convertedLine &amp;&amp; timestamp) {
        try {
            
            mergedLines.add(&quot;$convertedLine,$timestamp&quot;)
        } catch (Exception e) {
            log.error(&quot;Error parsing timestamp: $timestamp&quot;)
            
        }
    }
}

// Write merged lines to the final CSV file
finalCsvFile.write(mergedLines.join(&quot;\n&quot;))

// Log success message
log.info(&quot;Merged CSV data written to: $finalCsvFilePath&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DataInsertToDB-PostgreSql project name and run" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.commons.io.FileUtils
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.io.File
import java.math.BigDecimal
import java.text.SimpleDateFormat


def dbUrl = vars.get(&quot;DatabaseUrl&quot;)
def dbUser = vars.get(&quot;DatabaseUserName&quot;)
def dbPassword = vars.get(&quot;DatabasePassword&quot;)


def csvFilePath = vars.get(&quot;Final_CSV_Path&quot;)

def lines = FileUtils.readLines(new File(csvFilePath), &quot;UTF-8&quot;)


Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)
def ProjectName = vars.get(&quot;ProjectDetails&quot;)

def projectName = vars.get(&quot;TimeZone&quot;)
def runDetails = vars.get(&quot;RunDetails&quot;)
def concurrentUsers = vars.get(&quot;ConcurrentUsers&quot;) as Integer
def totalTestDuration = vars.get(&quot;TotalTestDuration&quot;) as Integer

String sql = &quot;INSERT INTO public.\&quot;${ProjectName}\&quot;(\&quot;Label\&quot;, \&quot;Samples\&quot;, \&quot;Average\&quot;, \&quot;Median\&quot;, \&quot;Line_90\&quot;, \&quot;Line_95\&quot;, \&quot;Line_99\&quot;, \&quot;Min\&quot;, \&quot;Max\&quot;, \&quot;Error_\&quot;, \&quot;Throughput\&quot;, \&quot;ReceivedKB_sec\&quot;, \&quot;Std_Dev\&quot;, \&quot;startTime\&quot;, \&quot;endTime\&quot;, \&quot;TimeZone\&quot;, \&quot;RunDetails\&quot;, \&quot;ConcurrentUsers\&quot;, \&quot;TotalTestDuration\&quot;) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;
PreparedStatement statement = connection.prepareStatement(sql)


lines = lines.drop(1)


lines.eachWithIndex { line, index -&gt;
    if (index &lt; lines.size() - 1) {
        def data = line.split(&quot;,&quot;)
        
        def Label = data[0]
        def Samples = data[1] as Integer
        
    
        def convertToSeconds = { value -&gt;
            def floatValue = value as Float
            def seconds = floatValue / 1000
            new BigDecimal(seconds).setScale(2, BigDecimal.ROUND_HALF_UP)
        }
        
        def Average = convertToSeconds(data[2])
        def Median = convertToSeconds(data[3])
        def Line_90 = convertToSeconds(data[4])
        def Line_95 = convertToSeconds(data[5])
        def Line_99 = convertToSeconds(data[6])
        def Min = convertToSeconds(data[7])
        def Max = convertToSeconds(data[8])
        
        def Error_ = data[9]
        def errorRateNumeric = Error_.replaceAll(&apos;%&apos;, &apos;&apos;) as Float
        
        def startTime = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).parse(data[13])
        def endTime = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).parse(data[14])
        
  
        statement.setString(1, Label)
        statement.setInt(2, Samples)
        statement.setBigDecimal(3, Average)
        statement.setBigDecimal(4, Median)
        statement.setBigDecimal(5, Line_90)
        statement.setBigDecimal(6, Line_95)
        statement.setBigDecimal(7, Line_99)
        statement.setBigDecimal(8, Min)
        statement.setBigDecimal(9, Max)
        statement.setFloat(10, errorRateNumeric)
        statement.setFloat(11, data[10] as Float)
        statement.setFloat(12, data[11] as Float)
        statement.setFloat(13, data[12] as Float)
        statement.setTimestamp(14, new java.sql.Timestamp(startTime.getTime()))
        statement.setTimestamp(15, new java.sql.Timestamp(endTime.getTime()))
        statement.setString(16, projectName) 
        statement.setString(17, runDetails) 
        
     
        if (concurrentUsers != null) {
            statement.setInt(18, concurrentUsers)}
        
        else
        {
            statement.setNull(18, java.sql.Types.INTEGER)
        }
        
        if (totalTestDuration != null) {
            statement.setInt(19, totalTestDuration) 
        } else {
            statement.setNull(19, java.sql.Types.INTEGER)
        }
        
        
        statement.executeUpdate()
    }
}


statement.close()
connection.close()
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">jdbc:postgresql://127.0.0.1:5432/postgres,postgres,qualiperf</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
